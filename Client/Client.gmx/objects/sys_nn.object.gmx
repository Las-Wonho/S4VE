<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup
only_single();
status = NN.status_disconnected;

//Message queue
inbox = ds_queue_create();
global.list = ds_list_create();


temp_buffer = "";
reading_length = 0;
read = false;
reading_length_string = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cleanup

//Message queue
ds_queue_destroy(inbox);
ds_list_destroy(global.list);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Receive incoming messages 

if (os_browser == browser_not_a_browser) {
    if (ds_map_find_value(async_load, 'id') == client) {
        if (ds_map_find_value(async_load, 'type') == network_type_data) {
            var buffer = ds_map_find_value(async_load, 'buffer');
            global.check_bytes += buffer_get_size(buffer);
            var signal = buffer_read(buffer, buffer_u8);
            
            with(obj_network) {
                switch(signal) {
                    case NN.signal_ping:
                        ping    = current_time - my_ping;
                        my_ping = current_time;
                    break;
                    
                    case NN.signal_login:
                        var answer = buffer_read(buffer, buffer_u8);
                        if ((answer == 1)or(answer == 2)) {
                            global.login = 1;
                            global.uuid  = buffer_read(buffer, buffer_string);
                            ini_open("auto_login.ini");
                            ini_write_string("user", "id", global.login_id);
                            ini_write_string("user", "password", global.login_pass);
                            ini_close();
                            room_goto(rm_search);
                            global.nickname = buffer_read(buffer, buffer_string);
                        }else {
                            show_message_async("로그인에 실패하였습니다 ;ㅅ;");
                            file_delete("auto_login.ini");
                        }
                    break;
                    
                    case NN.signal_register:
                        var answer = buffer_read(buffer, buffer_u8);
                        if(answer == 1) {
                            with(obj_guestLogin) {
                                if(guestLogin == 1) {
                                    var buffer = buffer_create(1, buffer_grow, 1);
                                    buffer_write(buffer, buffer_u8, NN.signal_login);
                                    buffer_write_string(buffer, global.login_id);
                                    buffer_write_string(buffer, global.login_pass);
                                    nn_send_message(buffer);
                                    buffer_delete(buffer);
                                }
                            }
                        }
                    break;
                    
                    case NN.signal_search:
                        global.team = buffer_read(buffer, buffer_string);
                        delay_x = buffer_read(buffer, buffer_u16);
                        delay_y = buffer_read(buffer, buffer_u16);
                        global.select_char = script_similar(1, obj_select.x, sprite_get_number(obj_select.sprite_index));
                        room_goto(rm_main);
                        alarm[9] = 1;
                    break;
                }
            }
            buffer_delete(buffer);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ENUM
enum NN{
    port         = 20000,
    signal_ping  = 0,
    signal_login = 1,
    signal_search= 2,
    signal_move  = 3,
    signal_handoff = 4,
    signal_instance = 5,
    signal_myinfo = 6,
    signal_hp = 7,
    signal_restart = 8,
    signal_register = 9,
    signal_endgame = 10,
    signal_kill_log = 11,
    
    debug_modes = 1, // 1 is on, 0 is off
    
    status_disconnected = -1,
    status_connecting   = 0,
    status_connected    = 1
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

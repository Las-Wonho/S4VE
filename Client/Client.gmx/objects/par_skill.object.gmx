<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init
activate = 1; // 1 is on, 0 is off
click = -1;
pointer[0] = 0; // x
pointer[1] = 0; // y
skill_index = -1;
range = 0;
delay = 0;
delay_max = 0;

add_x = 300;
add_y = 0;
add_mode = -1; // -1 is wait, 0 is go to right, 1 is go to left
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Mouse pointer movement check
if(global.can_control == 1) {
    var mx, my;
    for( fff=0; fff&lt;=4; fff+=1 ) {
        mx = device_mouse_x_to_gui(fff);
        my = device_mouse_y_to_gui(fff);
        if(device_mouse_check_button_pressed(fff, mb_left)) {
            if(point_distance(x, y, mx, my) &lt; 35) {
                click = fff;
                event_user(0);
                with(par_skill) {
                    activate = 0;
                }
                obj_joy2.activate = 0;
                activate = 1;
            }
        }
        
        if(device_mouse_check_button_released(fff, mb_left))and(click == fff) {
            click = -1;
            if(delay == 0)and(point_distance(x, y, pointer[0], pointer[1]) &gt; 65) {
                skill_play2(skill_index);
            }
            skill_play3(skill_index);
            with(par_skill) {
                activate = 1;
            }
            obj_joy2.activate = 1;
        }
    }
    
    if(click != -1)and(activate == 1) {
        pointer[0] = device_mouse_x_to_gui(click);
        pointer[1] = device_mouse_y_to_gui(click);
        
        if(point_distance(x, y, pointer[0], pointer[1]) &gt; 65)and(delay == 0) {
            if(skill_play(skill_index) == 1)
                delay = system.skill_delay[skill_index];
                delay_max = delay;
        }
    }
    
    if(activate == 0) {
        if(click != -1) {
            obj_joy2.activate = 1;
            with(par_skill) {
                activate = 1;
            }
        }
        click = -1;
    }
}else{
    click = -1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Delay
if(delay != 0) {
    delay--;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw
if(add_mode == 0) {
    add_x += (300 - add_x)/4;
}
    
if(add_mode == 1) {
    add_x += (0 - add_x)/4;
}

if(activate == 1)and(skill_index != -1)and(global.can_control == 1) {
    if(click != -1) {
        draw_sprite(spr_bulit_circle, 0, x + add_x, y + add_y);
        draw_sprite(sprite_index, skill_index, x + add_x + lengthdir_x(min(80, point_distance(x, y, pointer[0], pointer[1])), point_direction(x, y, pointer[0], pointer[1])), y + add_y + lengthdir_y(min(80, point_distance(x, y, pointer[0], pointer[1])), point_direction(x, y, pointer[0], pointer[1])));
        if(delay != 0) {
            draw_sprite_part_ext(spr_skill_delay, 0, 0, 0, 70, 70/delay_max*delay, x + add_x + lengthdir_x(min(80, point_distance(x, y, pointer[0], pointer[1])), point_direction(x, y, pointer[0], pointer[1]))-35, y + add_y + lengthdir_y(min(80, point_distance(x, y, pointer[0], pointer[1])), point_direction(x, y, pointer[0], pointer[1]))+35, 1, -1, c_white, 0.6);
        }
    }else {
        draw_sprite(sprite_index, skill_index, x + add_x, y + add_y);
        if(delay != 0) {
            draw_sprite_part_ext(spr_skill_delay, 0, 0, 0, 70, 70/delay_max*delay, x-35 + add_x, y+35 + add_y, 1, -1, c_white, 0.6);
        }
    }
}else{
    if(activate == 1){
        draw_sprite(sprite_index, skill_index, x + add_x, y + add_y);
        if(delay != 0) {
            draw_sprite_part_ext(spr_skill_delay, 0, 0, 0, 70, 70/delay_max*delay, x-35 + add_x, y+35 + add_y, 1, -1, c_white, 0.6);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Helper
if(click != -1) {
    draw_set_alpha(1);
    with(par_player) {
        if(control == 1) {
            switch(other.skill_index) {
                case 1:
                    if(point_distance(other.x, other.y, other.pointer[0], other.pointer[1]) &gt;= 65) {
                        draw_set_color(c_black);
                        draw_circle(x + lengthdir_x(100, point_direction(other.x, other.y, other.pointer[0], other.pointer[1])), y + lengthdir_y(100, point_direction(other.x, other.y, other.pointer[0], other.pointer[1])), 6, false)
                        draw_set_color(c_white);
                        draw_circle(x + lengthdir_x(100, point_direction(other.x, other.y, other.pointer[0], other.pointer[1])), y + lengthdir_y(100, point_direction(other.x, other.y, other.pointer[0], other.pointer[1])), 5, false)
                    }
                break;
                
                case 2:
                    if(point_distance(other.x, other.y, other.pointer[0], other.pointer[1]) &gt;= 65) {
                        draw_set_color(c_black);
                        draw_circle(x + lengthdir_x(min(120, max(point_distance(other.x, other.y, other.pointer[0], other.pointer[1]), 65)), point_direction(other.x, other.y, other.pointer[0], other.pointer[1])), y + lengthdir_y(min(120, max(point_distance(other.x, other.y, other.pointer[0], other.pointer[1]), 65)), point_direction(other.x, other.y, other.pointer[0], other.pointer[1])), 6, false)
                        draw_set_color(c_white);
                        draw_circle(x + lengthdir_x(min(120, max(point_distance(other.x, other.y, other.pointer[0], other.pointer[1]), 65)), point_direction(other.x, other.y, other.pointer[0], other.pointer[1])), y + lengthdir_y(min(120, max(point_distance(other.x, other.y, other.pointer[0], other.pointer[1]), 65)), point_direction(other.x, other.y, other.pointer[0], other.pointer[1])), 5, false)
                    }
                break;    
            
                default:
                    draw_set_alpha(0.2);
                    draw_set_color(c_black);
                    draw_line_width(x, y, x + lengthdir_x(other.range, point_direction(other.x, other.y, other.pointer[0], other.pointer[1])), y + lengthdir_y(other.range, point_direction(other.x, other.y, other.pointer[0], other.pointer[1])), 3)
                    draw_set_alpha(0.5);
                    draw_set_color(c_white);
                    draw_line_width(x, y, x + lengthdir_x(other.range, point_direction(other.x, other.y, other.pointer[0], other.pointer[1])), y + lengthdir_y(other.range, point_direction(other.x, other.y, other.pointer[0], other.pointer[1])), 2)
                    draw_set_alpha(1);
                break;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup
only_single();

//Set reference
application_surface_enable(false);
device_mouse_dbclick_enable(false);
randomize();

//Whether a connection (or an attempt) is active
active = false;

//Cached login info
login_uuid = "";
login_name = "";
login_id = "";

//Set ping
my_ping = current_time;
ping = current_time;

//Out ping
global.out_ping = 20000;

//Set timeout
network_set_config(network_config_connect_timeout, 200);

//Set ip
global.ip = "127.0.0.1";

//Set login
global.login = -1 // -1 is none, 0 is wait, 1 is okay
global.uuid  = -1 // -1 is none

alarm[0] = room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Connect to the correct server
nn_connect(global.ip, NN.port);

//Mark connection as active (or at least, actively in progress)
active = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Ping
var status = nn_status();
if (status == NN.status_connected){
    //Construct message
    var json_data = ds_map_create();
    ds_map_add(json_data, "id", NN.signal_ping);
    ds_map_add(json_data, "msg", string(current_time));
    var body = json_encode(json_data);
    ds_map_destroy(json_data);
    
    //Send message
    nn_send_message(body);
}

alarm[0] = room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Connection check
status = nn_status();
if (status == NN.status_disconnected) {
    if (!active) {
        active = true;
        alarm[1] = 1; //Connect attempt
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Monitor running status

if (active) {
    //Connection successful in login room, show login
    if (room == rm_connecting) &amp;&amp; (status == NN.status_connected) {
        room_goto(rm_login);
    }

    //Connection broke
    if (status == NN.status_disconnected) {
        //Connection broke while chatting, go back to login screen and ask for reconnect
        if (room != rm_connecting) {
            room_goto(rm_connecting);
        }
        active = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Receiving data

if (status == NN.status_connected) {
    while (nn_has_message()) {
        //Decode response
        var messages     = nn_get_message();
        show_debug_message(messages);
        var json_data    = json_decode(messages);
        if not(ds_exists(ds_type_map, json_data)) { continue; }
        var message_id   = ds_map_find_value(json_data, 'id');
        var message_body = ds_map_find_value(json_data, 'msg');
        ds_map_destroy(json_data);
        
        //Route between different functions
        switch (message_id) {
            case NN.signal_ping:
                my_ping = current_time;
                ping    = real(message_body);
            break;
            
            case NN.signal_login:
                var signal_login_data = json_decode(message_body);
                if not(ds_exists(ds_type_map, signal_login_data)) { break; }
                if ((ds_map_find_value(signal_login_data, "msg") == 1)or(ds_map_find_value(signal_login_data, "msg") == 2)) {
                    global.login = 1;
                    global.uuid  = ds_map_find_value(signal_login_data, "uuid");
                    room_goto(rm_main);
                }else {
                    with(obj_login)
                    {
                    //Construct message
                    var json_data2 = ds_map_create();
                    ds_map_add(json_data2, "id", NN.signal_login);
                    ds_map_add(json_data2, "msg", get_string("로그인에 실패하였습니다. 다시 로그인 해주세요.", ""));
                    var body = json_encode(json_data2);
                    ds_map_destroy(json_data2);
                    
                    //Send message
                    nn_send_message(body);
                    }
                }
                ds_map_destroy(signal_login_data);
            break;
            
            case NN.signal_move:
                //show_message(message_body);
                var signal_move_data = json_decode(message_body);
                if not(ds_exists(ds_type_map, signal_move_data)) { break; }
                var check = true;
                with(par_player) {
                    if(control == 0) {
                        if(user_id == ds_map_find_value(signal_move_data, "user_id")) {
                            check = false;
                            other_x = ds_map_find_value(signal_move_data, "x");
                            other_y = ds_map_find_value(signal_move_data, "y");
                            other_z = ds_map_find_value(signal_move_data, "z");
                        }
                    }
                }
                
                if(check) {
                    switch(ds_map_find_value(signal_move_data, "type")) {
                        case 1:
                            var user_ins = instance_create(ds_map_find_value(signal_move_data, "x"), ds_map_find_value(signal_move_data, "y"), obj_sworder);
                        break;
                        
                        case 2:
                            var user_ins = instance_create(ds_map_find_value(signal_move_data, "x"), ds_map_find_value(signal_move_data, "y"), obj_hammer);
                        break;
                            
                        case 3:
                            var user_ins = instance_create(ds_map_find_value(signal_move_data, "x"), ds_map_find_value(signal_move_data, "y"), obj_hammer);
                        break;
                        
                        case 4:
                            var user_ins = instance_create(ds_map_find_value(signal_move_data, "x"), ds_map_find_value(signal_move_data, "y"), obj_magician);
                        break;
                        
                        case 5:
                            var user_ins = instance_create(ds_map_find_value(signal_move_data, "x"), ds_map_find_value(signal_move_data, "y"), obj_healer);
                        break;
                    }
                    user_ins.type    = ds_map_find_value(signal_move_data, "type");
                    user_ins.user_id = ds_map_find_value(signal_move_data, "user_id");
                }
                ds_map_destroy(signal_move_data);
            break;
            
            default:
            
            break;
        }
        
        // --
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw ping
if(my_ping - ping &gt; 0)
{
    draw_set_color(c_white)
    draw_set_font(fnt_text)
    draw_set_halign(fa_left)
    draw_set_valign(fa_top)
    draw_set_alpha(0.5)
    draw_text(5, 5, "ping " + string(my_ping - ping))
    draw_set_alpha(1)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
